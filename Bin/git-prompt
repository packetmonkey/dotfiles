#!/usr/bin/env ruby

require 'English'
require 'pathname'

# Helper methods for colorized terminal output
class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end
end

# Wraps the logic for generating my fancy git prompt segment
class GitPrompt
  def initialize(path)
    self.path = path
  end

  def prompt
    return unless git_repo?

    Dir.chdir path do
      prompt_string
    end
  end

  private

  attr_accessor :path

  def prompt_string
    ' ('.yellow +
      branch.yellow +
      dirty.yellow +
      pushable.yellow +
      ' ' + time_since_last_commit +
      ')'.yellow
  end

  def git_repo?
    search_up('.git') do |filename|
      return true if File.directory?(filename)
    end

    false
  end

  # Grifted with love from Bundler
  def search_up(*names)
    previous = nil
    current  = File.expand_path(::Pathname.pwd)

    until !File.directory?(current) || current == previous
      names.each do |name|
        filename = File.join(current, name)
        yield filename
      end
      previous = current
      current = File.expand_path('..', current)
    end
  end

  def branch
    @branch ||= `git rev-parse --abbrev-ref HEAD`.strip
  end

  def dirty
    return '' if `git status`.empty?
    '*'
  end

  def pushable
    return '' unless origin? && remote_branch?
    return '' if number_of_pushable_commits < 1
    "^#{number_of_pushable_commits}"
  end

  def origin?
    `git remote | grep origin | wc -l | awk {'print $1'}`.strip.to_i > 0
  end

  def remote_branch?
    `git log origin/#{branch}.. > /dev/null 2>&1`
    $CHILD_STATUS.to_i == 0
  end

  def number_of_pushable_commits
    cmd = "git log origin/#{branch}.. --oneline"
    @number_of_pushable_commits ||= `#{cmd}`.split("\n").count
  end

  def time_since_last_commit
    min = minutes_since_last_commit
    if min > 525_600 # Years
      "#{truncate(min / 525_600.0)}y".red
    elsif min > 10_080 # Weeks
      "#{truncate(min / 10_080.0)}w".red
    elsif min > 1440 # Days
      "#{truncate(min / 1440.0)}d".red
    elsif min > 60 # Hours
      "#{truncate(min / 60.0)}h".red
    elsif min > 15
      "#{min}m".yellow
    else
      "#{min}m".green
    end
  end

  def truncate(number)
    (number * 10).to_i / 10.0
  end

  def minutes_since_last_commit
    return if no_commits?
    last_commit_at = `git log --pretty=format:'%at' -1`.to_i
    (Time.now.to_i - last_commit_at) / 60
  end

  def no_commits?
    last_commit = `git log --pretty=format:'%at' -1 2>/dev/null`
    last_commit.empty?
  end
end

if ARGV.length != 1
  puts "Usage: #{File.basename($0)} /path/to/git/repo"
  exit
end

puts GitPrompt.new(ARGV[0]).prompt
